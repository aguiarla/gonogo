\ nogo.mpc - based on go.mpc and previously on DRRD_V6.mpc
\
\ Created by:        Marcelo S. Caetano / Marcelo B. Reyes / Diego H. Miranda
\ Created on:        Sep 17, 2013
\ Last modified by:  Diego Miranda
\ Last modified on:  Sep 27, 2013 
\ Modification:      The maximum prime time is now 1200 msec. Once this value is reached, the prime time will not change anymore.
\
\ Experiment:        Differential Reinforcement of Response Duration (DRRD)
\ Duration:          60 minutes
\ Number of cycles:  TBD
\
\ Comments:          TBD
\
\ Procedure:
\ TBD
\ 
\
\ Definition of the inputs (from rat)
\                       Event Code
^L_Press=1              \ 1 (.001)
^R_Press=2              \ 2 (.002)
^L_Release = 3			\ 3 (.003)
^R_Release = 4			\ 4 (.004)


\ Definition of the outputs (from experimenter)

						\Recorded as:
						\ON             OFF
^L_Light=1				\11 (.011)      21 (.021)
^R_Light=2				\12 (.012)      22 (.022)
^HouseLight=5           \15 (.015)      25 (.025)
^Food=6                 \16 (.016)      26 (.026)
^Phase_change=7			\17 (.017)		27 (.027)	On means the prime was increased by ^Increment and Off means the prime was decrease by ^Increment
^Prime = 8
\^Spare=10

^FailGo = 3				\13 (.013) time when the rat failed the Go trial
^SuccessNoGo = 4		\14 (.014) time when the nogo trial wait period was reached


\ Z Pulse constants; output off and on states
^OnL_Light 		= 1
^OnR_Light 		= 2
^OnHouseLight 	= 3
^OnFood 		= 4
^OnPhase_change = 5
^OnPrime 		= 6

^OnFailGo   	= 7 			\ detects when fail in a GO trial
^OnSuccessNoGo	= 8				\ detects when fail in a NOGO trial

^OffL_Light 	= 11
^OffR_Light 	= 12
^OffHouseLight 	= 13
^OffFood 		= 14
^OffPhase_change = 15

^STORE = 1000           \ divide by ^STORE to place event code in .xxx
^ON = 10                \ add ^ON
^OFF = 20               \ add ^OFF
^STATE = 29				\ Add 29 so that codes for states start at 50




\ Constants for current experiment
^sessionLength = 60   \ session length in minutes (e.g., 60 minutes) 
^InitialPrime = 100   \ Intial prime value (in ms) - ALL CONSTANTS MUST BE INTEGER
^Increment = 100      \ Prime increment    (in ms) - ALL CONSTANTS MUST BE INTEGER


\ Constants for GO/NOGO trials
^InitialDelay 	= 500   		\ initial time in ms to wait to turn the light on (either go or nogo)
^InitialGoDelay = 1000		\ initial min wait for no go trial	
^InitialNoGoDelay = 500 	\initial max wait time for the go trial. The rat has to release before this time


\ STATE constants
^StateEndSession = 32		\ Event Code on Disk is (32+^STATE)/^STORE = .061

DIM A=20000, B=30, T=3, D=2, F=1, E=3 \Check that variable A is the correct one


\ Variables used:
	\A - Array for time coded events
	\B - Total number of each event
    \C - For flicker
    \D - Variable to control the time between lever press and lever release
	\		D(0) = The current lever state
	\		D(1) = Time when the lever was pressed for the first time
	\		D(2) = Time when the lever was released
	\E - Variable representing Prime
	\		E(0) = Initial prime
	\		E(1) = Current prime
	\		E(2) = Initial delay for go trials
	\		E(3) = Initial delay for nogo trials
 	\F - Consecutive answer counter
	\		F(0) = consecutive correct answers
	\		F(1) = consecutive wrong answers
	\G - Variable used to count time (in minutes)
	\H - Prime Flag
	\I - List of possible Timout intervals
	\J - Interval selected from I
	\K - Variable that controls the intial prime based on the results of the previous session (changed in the submacro according to the subject) max. value 12
	\L - Variable coding the trial type: 1 = Go; 2= NoGo
	\M -
	\N -
	\O -
	\P -
	\Q -
	\R -
	\S -
	\T - Variable for time
	\U - Session start time
	\V - 
	\W - Variable used to record lever releases
	\X -
	\Y - Index counts number of time-stamped events
	\Z -


\ Save all variables to disk
DISKVARS = A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z


\ *******************************************************************
\ Enter procedure below; Experimental state sets 1-17 available

List I=1,1,2,2

s.s.1,
	s1,
		#Start: Set k = 5,
				E(0) = ^InitialPrime	*0.001"*K, 
				E(2) = ^InitialGoDelay	*0.001",
				E(3) = ^InitialNoGoDelay*0.001",
				F(0)=0, F(1)=0, H=0; --->s2   \Setting initial values

	s2,
		0": Set E(1)=E(0); ---> s3 			  						  	  \The first current prime time is defined and The Left Light is turned on
		
	s3,	\ when the rat presses the lever
		#R^L_Press: Set D(1) = BTIME; 		      						  \When the Left Lever is pressed, the variable D(1) assumes the current time value
		Randd L = I; --->s4
	
	s4,	\ while the lever is down
		#R^L_Press: Set D(0) = BTIME;							  		  \Checking if the lever is still pressed
		IF (D(0)-D(1) >= E(1)) [@startTrial, @Ignore]			\Testing if the prime time was reached
			@startTrial: IF ( L = 1) [@GoTrial, @NoGoTrial]		\Testing if the trial is go or nogo
				@GoTrial  : ON^R_Light; Z^OnR_Light; 	   --->s5					  			
				@NoGoTrial: ON^HouseLight; Z^OnHouseLight; --->s7		
			@Ignore: --->s4											  \If not, that time is not saved
		0": --->s3							  				  \When the Left Lever is released before initial delay, the program goes back to detect the next press


	s5, \ GO trial
		#R^L_Press: Set D(0) = BTIME;							  		  \Checking if the lever is still pressed
		IF (D(0)-D(1) >= E(2)+E(1)) and (H=0)  [@SaveFailGO, @Ignore]	  \Testing if the prime time was reached
			@SaveFailGO: z^OnFailGO; set H=1 --->s5						  \If yes, that time is saved
			@Ignore: --->s5												  \If not, that time is not saved
		0": Set D(2) = BTIME; Set H=0; OFF^R_Light; z^OffR_Light; --->s6  \When the Left Lever is released, the variable D(2) assumes the current time value
		
	s6,	\ continuation of go trial - deciding if recieves food or not
		0": IF D(2)-D(1) <= E(2)+E(1) [@Food, @NoFood]  										 			\Testing if the time between the press and release is equal or above the current prime time
				@Food:   Add F(0); Set F(1)=0;  --->s8 					 					 				\If yes, the variable which counts the correct answers is increased in 1 unit
				@NoFood: Add F(1); Set F(0)=0;  --->s3		\If not, the variable which counts the correct answers is set to 0 and the timeout interval is set
			

	s7, \ NOGO trial
		#R^L_Press: Set D(0) = BTIME;							  		  	\Checking if the lever is still pressed
		IF (D(0)-D(1) >= E(3)+E(1)) and (H=0)  [@SaveSuccessNOGO, @Ignore]	\Testing if the wait time was reached
			@SaveSuccessNOGO: z^OnSuccessNoGo; set H=1 --->s7				\If yes, that time is saved
			@Ignore: --->s7												  	\If not, that time is not saved
		0": Set D(2) = BTIME; Off^HouseLight; Z^OffHouseLight; 
		IF (D(2)-D(1) <= E(3)+E(1)) [@ignore, @Food]	  \Testing if the prime time was reached
			@ignore: Add F(1); Set F(0)=0; --->s3	
			@Food: 	 Add F(0); Set F(1)=0; --->s8				
		
	s8,
		0": On^Food; z^OnFood; --->s9				 	\Sugar pellet delivery - ON	  
		
	s9,
		0.1": Off^Food; z^OffFood; --->s3			 	\Sugar pellet delivery - OFF	 
	
\	s9,
\		0": IF E(1)>=^InitialPrime*0.001"*12 [@freeze_prime, @continue] 	\Testing if the prime has reached 500 msec 
\			@freeze_prime:  Set E(1)=^InitialPrime*0.001"*12; --->s3		\If yes, the prime doesn't change anymore and the prime time is set 1200 msec (just to be sure)
\			@continue: --->s10												\If not, the prime still can be either increased or decreased
	
\	s10,
\		0": IF F(0)>=3 [@Increment, @DoubleCheck]			                      				\Phase test: Testing if the subject made 3 correct answers in a row
\				@Increment: Set E(1)=E(1)+^Increment*0.001", F(0)=0; z^OnPhase_change; --->s3   \If yes, the prime time is incremented and F is set to 0
\				@DoubleCheck: IF (F(1)=6) and (E(1)>E(0)) [@Decrement, @keep]					\If not, the prime time is checked for 6 wrong answers in a row (obs: E must be higher than ^InitialPrime
\						@Decrement: Set E(1)=E(1)-^Increment*0.001", F(1)=0; z^OffPhase_change; --->s3
\						@Keep: --->s3							         	 					 			 \If not, the prime time keeps the same value
	
\ *******************************************************************
\s.s.18,		\Control Flicker
\	s1,
\		.01": IF C=1 [@Flicker, @NoFlicker]
\			@Flicker: --->s2
\			@NoFlicker: --->s1
\
\	s2,
\		.5": On^HouseLight; --->s3
\
\	s3,
\		.5": Off^HouseLight; --->s1


s.s.19,		\Save FailGo
	s1,
		#z^OnFailGo	: Set A(Y)=BTIME-U+(^FailGo+^ON)/^STORE; Add Y,B(^FailGo+^ON); --->s1

s.s.20,		\Save SuccessNoGo
	s1,
		#z^OnSuccessNoGo	: Set A(Y)=BTIME-U+(^SuccessNoGo+^ON)/^STORE; Add Y,B(^SuccessNoGo+^ON); --->s1
		
		
		
\s.s.20,		\Record all inputs
\	s1,
\		#R^L_Press:     Set A(Y) = BTIME-U + ^L_Press/^STORE; Add Y, B(^L_Press); --->s1
\		#R^R_Press:     Set A(Y) = BTIME-U + ^R_Press/^STORE; Add Y, B(^R_Press); --->s1
\		#R^L_Release:   Set A(Y) = BTIME-U + ^L_Release/^STORE; Add Y, B(^L_Release); --->s1
\		#R^R_Release:   Set A(Y) = BTIME-U + ^R_Release/^STORE; Add Y, B(^R_Release); --->s1



s.s.21,		\Trinomial variable for LEFT lever release: W=0 released; 1 first press; 2 still pressed
	s1,
		#R^L_Press: Set W=1; Set A(Y) = BTIME-U + ^L_Press/^STORE; Add Y, B(^L_Press); --->s2

	s2,
		#R^L_Press:	Set W=2; --->s2
		0": Set W=0; Set A(Y) = BTIME-U + ^L_Release/^STORE; Add Y, B(^L_Release); --->s1


s.s.22,		\Trinomial variable for RIGHT lever release: W=0 released; 1 first press; 2 still pressed
	s1,
		#R^R_Press: Set W=1; Set A(Y) = BTIME-U + ^R_Press/^STORE; Add Y, B(^R_Press); --->s2

	s2,
		#R^R_Press:	Set W=2; --->s2
		0": Set W=0; Set A(Y) = BTIME-U + ^R_Release/^STORE; Add Y, B(^R_Release); --->s1


s.s.24,		\L_Light state set
	s1,
		#z^OnL_Light		: Set A(Y)=BTIME-U+(^L_Light+^ON)/^STORE; Add Y,B(^L_Light+^ON); --->s1
		#z^OffL_Light		: Set A(Y)=BTIME-U+(^L_Light+^OFF)/^STORE; Add Y,B(^L_Light+^OFF); --->s1


s.s.25,		\R_Light state set
	s1,
		#z^OnR_Light		: Set A(Y)=BTIME-U+(^R_Light+^ON)/^STORE; Add Y,B(^R_Light+^ON); --->s1
		#z^OffR_Light		: Set A(Y)=BTIME-U+(^R_Light+^OFF)/^STORE; Add Y,B(^R_Light+^OFF); --->s1


s.s.26,		\HouseLight state set
	s1,
		#z^OnHouseLight     : Set A(Y)=BTIME-U+(^HouseLight+^ON)/^STORE; Add Y,B(^HouseLight+^ON); --->s1
		#z^OffHouseLight    : Set A(Y)=BTIME-U+(^HouseLight+^OFF)/^STORE; Add Y,B(^HouseLight+^OFF); --->s1


s.s.27,		\Food state set
	s1,
		#z^OnFood           : Set A(Y)=BTIME-U+(^Food+^ON)/^STORE; Add Y,B(^Food+^ON); --->s1
		#z^OffFood          : Set A(Y)=BTIME-U+(^Food+^OFF)/^STORE; Add Y,B(^Food+^OFF); --->s1

		
\ Record STATEs (state sets 26 - 29 available)
s.s.28,		\Event codes for states start at 50
	s1,
		#z^StateEndSession	: Set A(Y)=BTIME-U+(^StateEndSession+^STATE)/^STORE; Add Y; --->s1

s.s.29,		\Phase change
	s1,
		#z^OnPhase_change   : Set A(Y)=BTIME-U+(^Phase_change+^ON)/^STORE; Add Y,B(^Phase_change+^ON); --->s1
		#z^OffPhase_change  : Set A(Y)=BTIME-U+(^Phase_change+^OFF)/^STORE; Add Y,B(^Phase_change+^OFF); --->s1

s.s.30,		\Save Prime
	s1,
		#z^OnPrime    		: Set A(Y)=BTIME-U+(^Prime+^ON)/^STORE; Add Y,B(^Prime+^ON); --->s1
		
s.s.31,		\Initialization
	s1,
		#Start: --->s2

	s2,		\Show data (update every minute)
        #K1 ! 1":  SHOW 1, Time (sec), (BTIME-U)/1";
                   SHOW 2, Left Press, B(^L_Press);
                   SHOW 3, Consec. Correct, F(0);
                   SHOW 4, Consec. Wrong, F(1); 
                   SHOW 5, Phase advances, B(^Phase_change+^On);
                   SHOW 6, Phase back, B(^Phase_change+^Off);
				   Show 7, Curr. Prime (msec), E(1)*2;
				   Show 8, Food, B(^Food+^On);--->s2

s.s.32,		\End Session
	s1,
		#Start: Set U=BTIME; --->s2		\Change to s3 for condition alone

	s2,
		^SessionLength' ! #Z^StateEndSession ! #K99: #K1; --->s3

	s3, \END SESSION
		.01": Set A(Y)=-987.987; --->STOPABORTFLUSH
